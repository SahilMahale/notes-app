// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	helper "github.com/SahilMahale/notes-backend/internal/helper"
	mock "github.com/stretchr/testify/mock"

	models "github.com/SahilMahale/notes-backend/models"
)

// NotesOps is an autogenerated mock type for the NotesOps type
type NotesOps struct {
	mock.Mock
}

// CreateNote provides a mock function with given fields: title, body
func (_m *NotesOps) CreateNote(title string, body string) (string, helper.MyHTTPErrors) {
	ret := _m.Called(title, body)

	if len(ret) == 0 {
		panic("no return value specified for CreateNote")
	}

	var r0 string
	var r1 helper.MyHTTPErrors
	if rf, ok := ret.Get(0).(func(string, string) (string, helper.MyHTTPErrors)); ok {
		return rf(title, body)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(title, body)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) helper.MyHTTPErrors); ok {
		r1 = rf(title, body)
	} else {
		r1 = ret.Get(1).(helper.MyHTTPErrors)
	}

	return r0, r1
}

// DeleteNote provides a mock function with given fields: noteId
func (_m *NotesOps) DeleteNote(noteId string) helper.MyHTTPErrors {
	ret := _m.Called(noteId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNote")
	}

	var r0 helper.MyHTTPErrors
	if rf, ok := ret.Get(0).(func(string) helper.MyHTTPErrors); ok {
		r0 = rf(noteId)
	} else {
		r0 = ret.Get(0).(helper.MyHTTPErrors)
	}

	return r0
}

// GetAllNotes provides a mock function with given fields:
func (_m *NotesOps) GetAllNotes() (models.NotesResp, helper.MyHTTPErrors) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllNotes")
	}

	var r0 models.NotesResp
	var r1 helper.MyHTTPErrors
	if rf, ok := ret.Get(0).(func() (models.NotesResp, helper.MyHTTPErrors)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() models.NotesResp); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.NotesResp)
		}
	}

	if rf, ok := ret.Get(1).(func() helper.MyHTTPErrors); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(helper.MyHTTPErrors)
	}

	return r0, r1
}

// GetNote provides a mock function with given fields: noteID
func (_m *NotesOps) GetNote(noteID string) (models.NoteResp, helper.MyHTTPErrors) {
	ret := _m.Called(noteID)

	if len(ret) == 0 {
		panic("no return value specified for GetNote")
	}

	var r0 models.NoteResp
	var r1 helper.MyHTTPErrors
	if rf, ok := ret.Get(0).(func(string) (models.NoteResp, helper.MyHTTPErrors)); ok {
		return rf(noteID)
	}
	if rf, ok := ret.Get(0).(func(string) models.NoteResp); ok {
		r0 = rf(noteID)
	} else {
		r0 = ret.Get(0).(models.NoteResp)
	}

	if rf, ok := ret.Get(1).(func(string) helper.MyHTTPErrors); ok {
		r1 = rf(noteID)
	} else {
		r1 = ret.Get(1).(helper.MyHTTPErrors)
	}

	return r0, r1
}

// UpdateNote provides a mock function with given fields: _a0, _a1
func (_m *NotesOps) UpdateNote(_a0 string, _a1 models.NotePatchRequest) (models.NotePatchResp, helper.MyHTTPErrors) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNote")
	}

	var r0 models.NotePatchResp
	var r1 helper.MyHTTPErrors
	if rf, ok := ret.Get(0).(func(string, models.NotePatchRequest) (models.NotePatchResp, helper.MyHTTPErrors)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, models.NotePatchRequest) models.NotePatchResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.NotePatchResp)
	}

	if rf, ok := ret.Get(1).(func(string, models.NotePatchRequest) helper.MyHTTPErrors); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(helper.MyHTTPErrors)
	}

	return r0, r1
}

// NewNotesOps creates a new instance of NotesOps. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotesOps(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotesOps {
	mock := &NotesOps{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
