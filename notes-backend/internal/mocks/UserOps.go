// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	helper "github.com/SahilMahale/notes-backend/internal/helper"
	mock "github.com/stretchr/testify/mock"
)

// UserOps is an autogenerated mock type for the UserOps type
type UserOps struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: username, email, pass
func (_m *UserOps) CreateUser(username string, email string, pass string) helper.MyHTTPErrors {
	ret := _m.Called(username, email, pass)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 helper.MyHTTPErrors
	if rf, ok := ret.Get(0).(func(string, string, string) helper.MyHTTPErrors); ok {
		r0 = rf(username, email, pass)
	} else {
		r0 = ret.Get(0).(helper.MyHTTPErrors)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: username, pass
func (_m *UserOps) DeleteUser(username string, pass string) helper.MyHTTPErrors {
	ret := _m.Called(username, pass)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 helper.MyHTTPErrors
	if rf, ok := ret.Get(0).(func(string, string) helper.MyHTTPErrors); ok {
		r0 = rf(username, pass)
	} else {
		r0 = ret.Get(0).(helper.MyHTTPErrors)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields:
func (_m *UserOps) GetAllUsers() ([]string, helper.MyHTTPErrors) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []string
	var r1 helper.MyHTTPErrors
	if rf, ok := ret.Get(0).(func() ([]string, helper.MyHTTPErrors)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() helper.MyHTTPErrors); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(helper.MyHTTPErrors)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: username, pass
func (_m *UserOps) LoginUser(username string, pass string) (bool, helper.MyHTTPErrors) {
	ret := _m.Called(username, pass)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 bool
	var r1 helper.MyHTTPErrors
	if rf, ok := ret.Get(0).(func(string, string) (bool, helper.MyHTTPErrors)); ok {
		return rf(username, pass)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(username, pass)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) helper.MyHTTPErrors); ok {
		r1 = rf(username, pass)
	} else {
		r1 = ret.Get(1).(helper.MyHTTPErrors)
	}

	return r0, r1
}

// NewUserOps creates a new instance of UserOps. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserOps(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserOps {
	mock := &UserOps{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
